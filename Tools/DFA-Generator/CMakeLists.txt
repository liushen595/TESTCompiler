cmake_minimum_required(VERSION 3.26)

# 如果这个文件作为子项目被包含，则不需要重新设置项目
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    project(DFA_Generator)
endif()

# 设置输出目录为Tools目录下的相应位置
set(DFA_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/bin/Debug)
set(DFA_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/bin/Release)
set(DFA_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/bin/Debug)
set(DFA_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/bin/Release)

# 为所有配置设置输出目录
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_SOURCE_DIR}/bin/${OUTPUTCONFIG})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_SOURCE_DIR}/bin/${OUTPUTCONFIG})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_SOURCE_DIR}/bin/${OUTPUTCONFIG})
endforeach()

# 包含头文件目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/header)

# 收集源文件
file(GLOB_RECURSE DFA_GENERATOR_SOURCES 
    ${CMAKE_CURRENT_SOURCE_DIR}/source/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/source/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/source/*.cxx
)

# 收集头文件
file(GLOB_RECURSE DFA_GENERATOR_HEADERS
    ${CMAKE_CURRENT_SOURCE_DIR}/header/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/header/*.h
)

# 创建DFA生成器可执行文件，包含所有源文件
if(DFA_GENERATOR_SOURCES)
    add_executable(DFAGenerator ${DFA_GENERATOR_SOURCES})
    target_include_directories(DFAGenerator PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/header)
    
    # 设置可执行文件的输出目录
    set_target_properties(DFAGenerator PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${DFA_RUNTIME_OUTPUT_DIRECTORY_DEBUG}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${DFA_RUNTIME_OUTPUT_DIRECTORY_RELEASE}
    )
endif()

# 创建必要的目录
file(MAKE_DIRECTORY ${DFA_RUNTIME_OUTPUT_DIRECTORY_DEBUG})
file(MAKE_DIRECTORY ${DFA_RUNTIME_OUTPUT_DIRECTORY_RELEASE})

# 打印DFA生成器配置信息
message(STATUS "DFA Generator configured")
message(STATUS "DFA Generator sources: ${DFA_GENERATOR_SOURCES}")
message(STATUS "DFA Generator headers: ${DFA_GENERATOR_HEADERS}")